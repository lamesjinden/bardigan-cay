{:tasks {:init               (do (def global "global"))

         clean-client        {:requires ([babashka.fs :as fs])
                              :task     (let [resources-out "resources/out"
                                              resources-public-js "resources/public/js"
                                              dirs [resources-out resources-public-js]
                                              files []]
                                          (println "Cleaning (client)")
                                          (println "  " (clojure.string/join ", " dirs))
                                          (doseq [dir dirs]
                                            (fs/delete-tree dir))
                                          (println "  " (clojure.string/join ", " files))
                                          (doseq [file files]
                                            (fs/delete-if-exists file)))}

         clean-server        {:requires ([babashka.fs :as fs])
                              :task     (let [target-dir "target"]
                                          (println "Cleaning (server)")
                                          (println "  " target-dir)
                                          (fs/delete-tree target-dir))}

         clean               (do
                               (run 'clean-client)
                               (run 'clean-server))

         build-dev-client    (do
                               (println "Compiling ClojureScript development build")
                               (shell "npx shadow-cljs compile app"))

         build-client        (do
                               (println "Compiling ClojureScript release build")
                               (shell "npx shadow-cljs release app"))

         build-server        (do
                               (println "Compiling Clojure")
                               (clojure "-T:uberjar uber"))

         all                 (do (run 'clean-client)
                                 (run 'build-client)
                                 (run 'clean-server)
                                 (run 'build-server))

         run-dev-client      (shell "npx shadow-cljs watch app")
         run-dev-client-repl (run 'run-dev-client)          ;; shadow provides nrepl
         run-dev-server      (let [cli-args (clojure.string/join " " *command-line-args*)
                                   default-args ["--directory" "'../../Documents/wiki/bedrock/'" "--export-dir" "'../../Documents/wiki/bedrock/exported/'"]
                                   args (concat default-args *command-line-args*)
                                   base-command "-M:run-dev-server:dev-server:server:dev"
                                   command (format "%s %s" base-command (clojure.string/join " " args))]
                               (clojure command))
         run-dev-server-repl (clojure "-M:nrepl-main:dev-server:server:dev")
         run-minimal         (do (run 'build-dev-client)
                                 (run 'run-dev-server))

         test                (do (clojure "-M:test:server"))}}

